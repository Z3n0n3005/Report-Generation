/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package report.generation;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import report.generation.segmentation.*;
import report.generation.summarization.*;
import report.generation.util.*;

public class App {
    static String PDF_EXTENSION = ".pdf";
    static String XML_EXTENSION = ".xml";
    static String YAML_EXTENSION = ".yaml";
    static String SEG_FILE_PREFIX = "seg_";
    static String SUM_FILE_PREFIX = "sum_";
    static String FILE_PATH_PROPERTY = "file";
    static String FOLDER_PATH_PROPERTY = "folder";
    static String PROJECT_PATH = System.getProperty("user.dir");
    static String PDF_RELATIVE_PATH = "../paper/";
    static String SEG_XML_RELATIVE_PATH = "../output/segmentationXml/";
    static String SEG_YAML_RELATIVE_PATH = "../output/segmentationYaml/";
    static String SUM_YAML_RELATIVE_PATH = "../output/summaryYaml/";

    String pdfSegOutputPath; 
    String yamlParseOutputPath;
    String yamlSummaryPath;
    SectionList sectionListAfterParse;
    SectionList sectionListSummary;
    List<File> fileList;

    public static void main(String[] args) throws IOException {
        
        System.out.println("[App] Start timing");
        System.out.println(PROJECT_PATH);
        long startTime = System.nanoTime();

        App app = new App();
        
        System.out.println("[App] file: " + System.getProperty(FILE_PATH_PROPERTY));
        System.out.println("[App] folder: " + System.getProperty(FOLDER_PATH_PROPERTY));
        
        app.setFileList();
        // app.pdfSegOutputPath = app.getSegXmlPath();
        // app.yamlParseOutputPath = app.getSegYamlPath();
        // app.yamlSummaryPath = app.getSumYamlPath();

        // app.generateEngine();
        // app.pdfSegmenting();
        // app.parseXML();
        // app.parseYAML();
        // app.summarizeSegments();

        long endTime = System.nanoTime();
        double totalTime = (endTime - startTime)/1000000;
        System.out.println("[App] Time elapsed = " + totalTime);
    }

    private void generateEngine(){
        long startTimeGenerateEngine = System.nanoTime();
        PdfSegmentation.generateEngine();
        long endTimeGenerateEngine = System.nanoTime();
        double engineGenerationTime = (endTimeGenerateEngine - startTimeGenerateEngine)/1000000;
        System.out.println("[App] Engine generation time: " + engineGenerationTime );
    }

    private void abstractParsing(){
        // long startTimeAbstractParse = System.nanoTime();
        // String pdfAbstract = PdfSegmentation.parseHeader(pdfPath);
        // Utility.printToFile(pdfAbstract, pdfSegOutputPath);
        // long endTimeAbstractParse = System.nanoTime();
        // double pdfHeaderParseTime = (endTimeAbstractParse - startTimeAbstractParse)/1000000;
        // System.out.println("[App] First PDF Header parse time = " + pdfHeaderParseTime);
    }

    private void pdfSegmenting(File file){
        long startTimePDFSeg = System.nanoTime();

        // String path = System.getProperty(FILE_PATH_PROPERTY);
        // System.out.println("[App] filepath: " + path);
        // String pdfSegResult = PdfSegmentation.pdfSegmenting(PDF_RELATIVE_PATH + path);
        String pdfSegResult = PdfSegmentation.pdfSegmenting(file);

        Utility.printToFile(pdfSegResult, pdfSegOutputPath);
        long endTimePDFSeg = System.nanoTime();
        double pdfSegTime = (endTimePDFSeg - startTimePDFSeg)/1000000;
        System.out.println("[App] First PDF Segmentation time = " + pdfSegTime);
    }

    private void parseXML(){
        long startTimeXMLParse = System.nanoTime();
        SectionList xmlParseResult = XMLParser.parseXML(pdfSegOutputPath);
        Utility.printToYamlFile(xmlParseResult, yamlParseOutputPath);
        long endTimeXMLParse = System.nanoTime();
        double xmlParseTime = (endTimeXMLParse - startTimeXMLParse)/1000000;
        System.out.println("[App] XML Parsing time = " + xmlParseTime);
    }

    private void parseYAML(){
        long startTimeYAMLParse = System.nanoTime();
        sectionListAfterParse = YAMLParser.parseYAML(yamlParseOutputPath);
        long yamlParseEndTime = System.nanoTime();
        double yamlParseTime = (yamlParseEndTime - startTimeYAMLParse)/1000000;
        System.out.println("[App] YAML Parsing time = " + yamlParseTime);
    }

    private void summarizeSegments() throws IOException{
        long startTimeSummarize = System.nanoTime();

        // String abstractStr = sectionListAfterParse.getAbstractSeg();
        // String firstSectionContent = sectionListAfterParse.getSection(0).getContent();
        // String abstractSummary = LSA.summarize(abstractStr, 1);
        // String firstSectionSummary = LSA.summarize(firstSectionContent, 1);

        // System.out.println(firstSectionContent);
        // System.out.println(firstSectionSummary);
        // System.out.println(abstractSummary);

        sectionListSummary = SegmentSummarization.summarizeSegmentsLSA(sectionListAfterParse, 2);
        Utility.printToYamlFile(sectionListSummary, yamlSummaryPath);
        System.out.println(sectionListSummary.toString());

        long endTimeSummarize = System.nanoTime();
        double summarizeTime = (endTimeSummarize - startTimeSummarize)/10000000;
        System.out.println("[App] Summarization time = " + summarizeTime);
    }

    private void setFileList(){
        String pdfPath = System.getProperty(FILE_PATH_PROPERTY);
        String folderPath = System.getProperty(FOLDER_PATH_PROPERTY);
        if(pdfPath != null){
            fileList = Utility.listAllFilesFromFolder(new File(pdfPath));
        } else if(folderPath != null){
            fileList = Utility.listAllFilesFromFolder(new File(folderPath));
        }
        System.out.println(fileList);
    }

    private String getPdfName(){
        return "";
    }

    private String getSumYamlPath(){
        String pdfPath = this.getPdfName();
        String result = SUM_YAML_RELATIVE_PATH + SUM_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, YAML_EXTENSION);
        return result;
    }

    private String getSegXmlPath(){
        String pdfPath = this.getPdfName();
        String result = SEG_XML_RELATIVE_PATH + SEG_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, XML_EXTENSION);
        return result;
    }

    private String getSegYamlPath(){
        String pdfPath = this.getPdfName();
        String result = SEG_YAML_RELATIVE_PATH + SEG_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, YAML_EXTENSION);
        return result;
    }
}
