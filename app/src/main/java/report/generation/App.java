/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package report.generation;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

import report.generation.segmentation.*;
import report.generation.summarization.*;
import report.generation.util.*;

public class App {
    static final String PDF_EXTENSION = ".pdf";
    static final String XML_EXTENSION = ".xml";
    static final String YAML_EXTENSION = ".yaml";
    static final String SEG_FILE_PREFIX = "seg-";
    static final String SUM_FILE_PREFIX = "sum-";

    static final String FILE_PATH_PROPERTY = "file";
    static final String FOLDER_PATH_PROPERTY = "folder";

    static final String PROJECT_PATH = System.getProperty("user.dir");
    static final String PDF_RELATIVE_PATH = "../paper/";
    static final String SEG_XML_RELATIVE_PATH = "../output/segmentationXml/";
    static final String SEG_YAML_RELATIVE_PATH = "../output/segmentationYaml/";
    static final String SUM_YAML_RELATIVE_PATH = "../output/summaryYaml/";

    String pdfSegOutputPath; 
    String yamlParseOutputPath;
    String yamlSummaryPath;
    SectionList sectionListAfterParse;
    SectionList sectionListSummary;
    List<File> fileList;

    public static void main(String[] args) throws IOException {
        
        System.out.println("[App] Start timing");
        System.out.println(PROJECT_PATH);
        long startTime = System.nanoTime();

        App app = new App();
        
        System.out.println("[App] file: " + System.getProperty(FILE_PATH_PROPERTY));
        System.out.println("[App] folder: " + System.getProperty(FOLDER_PATH_PROPERTY));
        System.out.println("[App] algo: " + System.getProperty("algo"));
        
        app.setFileList();
        app.generateEngine();
        for (int i = 0; i < app.fileList.size(); i++){
            File file = app.fileList.get(i);
            app.pdfSegmenting(file);
            app.parseXML(file);
            app.parseYAML(file);
            if(AlgoEnum.getCurrentAlgo() == AlgoEnum.TEXTRANK){
                continue;
            }
            app.summarizeSegments(file);
        }

        long endTime = System.nanoTime();
        double totalTime = (endTime - startTime)/1000000;
        System.out.println("[App] Time elapsed = " + totalTime);
    }

    private void generateEngine(){
        long startTimeGenerateEngine = System.nanoTime();
        PdfSegmentation.generateEngine();
        long endTimeGenerateEngine = System.nanoTime();
        double engineGenerationTime = (endTimeGenerateEngine - startTimeGenerateEngine)/1000000;
        System.out.println("[App] Engine generation time: " + engineGenerationTime );
    }

    private void abstractParsing(){
        // long startTimeAbstractParse = System.nanoTime();
        // String pdfAbstract = PdfSegmentation.parseHeader(pdfPath);
        // Utility.printToFile(pdfAbstract, pdfSegOutputPath);
        // long endTimeAbstractParse = System.nanoTime();
        // double pdfHeaderParseTime = (endTimeAbstractParse - startTimeAbstractParse)/1000000;
        // System.out.println("[App] First PDF Header parse time = " + pdfHeaderParseTime);
    }

    private void pdfSegmenting(File file){
        long startTimePDFSeg = System.nanoTime();

        String pdfSegResult = PdfSegmentation.pdfSegmenting(file);

        Utility.printToFile(pdfSegResult, this.getSegXmlPath(file));
        long endTimePDFSeg = System.nanoTime();
        double pdfSegTime = (endTimePDFSeg - startTimePDFSeg)/1000000;
        System.out.println("[App] First PDF Segmentation time = " + pdfSegTime);
    }

    private void parseXML(File file){
        long startTimeXMLParse = System.nanoTime();
        SectionList xmlParseResult = XMLParser.parseXML(this.getSegXmlPath(file));
        
        Utility.printToYamlFile(xmlParseResult, this.getSegYamlPath(file));
        long endTimeXMLParse = System.nanoTime();
        double xmlParseTime = (endTimeXMLParse - startTimeXMLParse)/1000000;
        System.out.println("[App] XML Parsing time = " + xmlParseTime);
    }

    private void parseYAML(File file){
        long startTimeYAMLParse = System.nanoTime();
        sectionListAfterParse = YAMLParser.parseYAML(this.getSegYamlPath(file));
        // Utility.printToYamlFile(sectionListAfterParse, this.getSegYamlPath(file));
        long yamlParseEndTime = System.nanoTime();
        double yamlParseTime = (yamlParseEndTime - startTimeYAMLParse)/1000000;
        System.out.println("[App] YAML Parsing time = " + yamlParseTime);
    }

    private void summarizeSegments(File file) throws IOException{
        long startTimeSummarize = System.nanoTime();

        sectionListSummary = SegmentSummarization.summarizeSegmentsLSA(sectionListAfterParse, 2);
        Utility.printToYamlFile(sectionListSummary, this.getSumYamlPath(file));

        long endTimeSummarize = System.nanoTime();
        double summarizeTime = (endTimeSummarize - startTimeSummarize)/10000000;
        System.out.println("[App] Summarization time = " + summarizeTime);
    }

    private void setFileList(){
        String pdfPath = System.getProperty(FILE_PATH_PROPERTY);
        String folderPath = System.getProperty(FOLDER_PATH_PROPERTY);

        if(pdfPath != null){
            fileList = Utility.listAllFilesFromFolder(new File(pdfPath));
        } else if(folderPath != null){
            fileList = Utility.listAllFilesFromFolder(new File(folderPath));
        }
        // System.out.println(fileList);
    }

    private String getPdfName(File file){
        return file.getName();
    }

    private String getSumYamlPath(File file){
        String pdfPath = this.getPdfName(file);
        String result = SUM_YAML_RELATIVE_PATH + SUM_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, YAML_EXTENSION);
        return result;
    }

    private String getSegXmlPath(File file){
        String pdfPath = this.getPdfName(file);
        String result = SEG_XML_RELATIVE_PATH + SEG_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, XML_EXTENSION);
        return result;
    }

    private String getSegYamlPath(File file){
        String pdfPath = this.getPdfName(file);
        String result = SEG_YAML_RELATIVE_PATH + SEG_FILE_PREFIX + pdfPath.replace(PDF_EXTENSION, YAML_EXTENSION);
        return result;
    }
}
